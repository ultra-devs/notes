

import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Hooks;
import reactor.core.publisher.Operators;
import reactor.core.scheduler.Schedulers;
import reactor.util.context.Context;
import reactor.core.CoreSubscriber;
import org.reactivestreams.Subscription;

import jakarta.annotation.PostConstruct;
import java.util.Map;
import java.util.function.Function;
import org.reactivestreams.Publisher;

@Component
public class ReactorMDCConfig {

    @PostConstruct
    public void setupHooks() {
        // Hook to propagate MDC context for each operator
        Hooks.onEachOperator("MDCContext", liftMdc());

        // Hook to propagate MDC context for schedulers
        Schedulers.onScheduleHook("MDCContext", runnable -> {
            Map<String, String> contextMap = MDC.getCopyOfContextMap();
            return () -> {
                if (contextMap != null) {
                    MDC.setContextMap(contextMap);
                }
                try {
                    runnable.run();
                } finally {
                    MDC.clear();
                }
            };
        });
    }

    private Function<? super Publisher<Object>, ? extends Publisher<Object>> liftMdc() {
        return Operators.liftPublisher((scannable, subscriber) -> new CoreSubscriber<Object>() {
            private final Map<String, String> contextMap = MDC.getCopyOfContextMap();

            @Override
            public void onSubscribe(Subscription s) {
                subscriber.onSubscribe(s);
            }

            @Override
            public void onNext(Object o) {
                if (contextMap != null) {
                    MDC.setContextMap(contextMap);
                }
                subscriber.onNext(o);
            }

            @Override
            public void onError(Throwable t) {
                if (contextMap != null) {
                    MDC.setContextMap(contextMap);
                }
                subscriber.onError(t);
            }

            @Override
            public void onComplete() {
                if (contextMap != null) {
                    MDC.setContextMap(contextMap);
                }
                subscriber.onComplete();
            }

            @Override
            public Context currentContext() {
                return subscriber.currentContext();
            }
        });
    }
}
