Sure, you can create a web-based text parser using HTML, JavaScript, and CSS. To implement this functionality, you'll need an HTML file with a form for file selection, dropdown options for the parsing methods, and input fields for the specific details like delimiter, index, etc.

Here's a basic structure to get you started:

HTML:
```html
<!DOCTYPE html>
<html>
<head>
    <title>Text Parser</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
    <input type="file" id="fileInput">
    <select id="options">
        <option value="slice">Slice and Dice</option>
        <option value="filter">Filter</option>
        <option value="format">Format</option>
    </select>

    <div id="sliceAndDiceOptions" style="display: none;">
        <label for="delimiter">Delimiter:</label>
        <input type="text" id="delimiter">
        <label for="indices">Indices:</label>
        <input type="text" id="indices">
    </div>

    <button onclick="parseFile()">Parse</button>

    <script src="script.js"></script>
</body>
</html>
```

JavaScript (script.js):
```javascript
function parseFile() {
    const selectedOption = document.getElementById("options").value;
    const file = document.getElementById("fileInput").files[0];
    const reader = new FileReader();

    reader.onload = function(event) {
        const fileContent = event.target.result;
        let parsedResult = "";

        if (selectedOption === "slice") {
            const delimiter = document.getElementById("delimiter").value;
            const indices = document.getElementById("indices").value.split(',');
            
            const lines = fileContent.split('\n');
            lines.forEach(line => {
                const fragments = line.split(delimiter);
                indices.forEach(index => {
                    parsedResult += fragments[parseInt(index)] + " ";
                });
            });
        }
        // Add other parsing options here

        console.log(parsedResult);
        // You can display or use 'parsedResult' as per your requirements
    };

    reader.readAsText(file);
}
```

This example demonstrates how to read a file, parse it based on the 'Slice and Dice' option, and extract fragments using the specified delimiter and indices. You can expand upon this code to incorporate the other parsing options (Filter, Format) as well as error handling and UI improvements in your CSS file (styles.css).